# app/run.py
from pathlib import Path
from typing import AsyncGenerator
import uvicorn

from app.api.v1.endpoints.stream import StreemAPI
from app.core.config import get_project_path_settings
from app.utils.logger import logger
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse

from app.core.middlewares import LogRouteMiddleware, DynamicCORSMiddleware
from app.db.dao.user import UserDAO
from app.api.v1.base_api import ProtectedSwagger
from app.api.v1.endpoints.user import AuthAPI, ProfileAPI, UserAPI, AdminAPI, BackgroundAPI, SecurityAPI
from app.docs.load_docs import terms_of_service, contact, main_description
from app.utils.reg_exceptions import register_exception_handlers
from scripts.version import get_app_version

logger.info('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Readme')
# gen_readme()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@asynccontextmanager
async def lifespan(application: FastAPI) -> AsyncGenerator:
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è...")
    register_exception_handlers(application)
    await configure_routers()
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –≤ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await UserDAO.check_roles_in_db()
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º API...")
    yield  # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    logger.info("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")

app = FastAPI(
    lifespan=lifespan,
    title="Anwill Back User",
    description=main_description,
    terms_of_service=terms_of_service,
    version=get_app_version(),
    contact=contact,
    openapi_url="/openapi.json",
    docs_url="/docs",
    license_info={"name": "Proprietary", "url": "https://api.anwill.fun"},
    swagger_ui_parameters={"persistAuthorization": True, "faviconUrl": "app/docs/favicon/favicon-96x96.png"},
    root_path_in_servers=False,
    swagger_ui_init_oauth={
        "clientId": "swagger-client",
        "appName": "Swagger UI Anwill Back User",
        "scopes": "USER DEVELOPER MODERATOR SUPPORT SYSADMIN ADMIN MANAGER",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
        "usePkceWithAuthorizationCodeGrant": True,
    }
)
#
# # ====== –ó–∞—â–∏—Ç–∞ Swagger UI ======
# protected_swagger = ProtectedSwagger()
#
# # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# @app.middleware("http")
# async def main_app_swagger_auth(request: Request, call_next):
#     return await protected_swagger.process_request(request, call_next)


# ====== –û—Å—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======
# app.add_middleware(FingerPrintMiddleware)       # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–æ–≤
app.add_middleware(LogRouteMiddleware)         # 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.add_middleware(DynamicCORSMiddleware)      # 3. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π CORS
# app.add_middleware(AutoRefreshMiddleware)      # 4. –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.


for route, path in get_project_path_settings().static_mounts.items():
    app.mount(f"/{route}", StaticFiles(directory=path), name=route)


@app.get("/health", include_in_schema=False)
def health():
    return {"status": "ok"}

@app.get("/user/README.md", include_in_schema=False)
async def readme():
    full_path = Path(__file__).parent / "README.md"
    return FileResponse(full_path)


@app.get("/user/README/readme_logo.png", include_in_schema=False)
async def readme_logo():
    full_path = Path(__file__).parent / "app/docs/readme_logo.png"
    return FileResponse(full_path)


logger.info("C–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
async def configure_routers():
    logger.info("–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã API...")

    auth_api = AuthAPI()
    security_api = SecurityAPI()
    profile_api = ProfileAPI()
    user_api = UserAPI()
    admin_api = AdminAPI()
    background_api = BackgroundAPI()
    sse_api = StreemAPI()


    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã...")
    await auth_api.initialize_routes()
    await security_api.initialize_routes()
    await profile_api.initialize_routes()
    await user_api.initialize_routes()
    await admin_api.initialize_routes()
    await background_api.initialize_routes()
    await sse_api.initialize_routes()


    logger.info("–î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    app.include_router(auth_api.router)
    app.include_router(security_api.router)
    app.include_router(profile_api.router)
    app.include_router(user_api.router)
    app.include_router(admin_api.router)
    app.include_router(background_api.router)
    app.include_router(sse_api.router)


if __name__ == "__main__":
    import asyncio
    import sys

    try:
        uvicorn.run(
            "run:app",
            host="0.0.0.0",
            port=55666,
            reload=True,
            proxy_headers=True,
            factory=False,
        )
    except asyncio.CancelledError:
        print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CancelledError)")
        sys.exit(0)
    except KeyboardInterrupt:
        print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (CTRL+C)")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
