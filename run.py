# app/run.py
from pathlib import Path
from typing import AsyncGenerator
from contextlib import asynccontextmanager
import os
import sys
import asyncio
from multiprocessing import Process

import uvicorn
import yaml
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse

from app.api.v1.endpoints.site import web_router
from app.api.v1.endpoints.stream import StreemAPI
from app.bot.webhooks.handlers import bot_router
from app.core.config import get_project_path_settings
from app.utils.logger import logger  # loguru
from app.core.middlewares import LogRouteMiddleware, DynamicCORSMiddleware
from app.db.dao.user import UserDAO
from app.api.v1.base_api import ProtectedSwagger
from app.api.v1.endpoints.stream_mjpeg import stream_video_router
from app.api.v1.endpoints.user import (
    AuthAPI,
    ProfileAPI,
    UserAPI,
    AdminAPI,
    BackgroundAPI,
    SecurityAPI,
)
from app.docs.load_docs import terms_of_service, contact, main_description
from app.utils.reg_exceptions import register_exception_handlers
from scripts.version import get_app_version

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ LPR: –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ lifespan FastAPI
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ENV:
#   LPR_ENABLED=1|0
#   LPR_CAMERAS_YAML="config/cameras.yaml"
#   LPR_CAMERA_KEY="falcone_receiver_cam2"
#   LPR_DET_MODEL="models/plate_yolov5s.onnx"

LPR_ENABLED = os.getenv("LPR_ENABLED", "1") == "1"
LPR_CAMERAS_YAML = os.getenv("LPR_CAMERAS_YAML", "config/cameras.yaml")
LPR_CAMERA_KEY = os.getenv("LPR_CAMERA_KEY", "falcone_receiver_cam2")
LPR_DET_MODEL = os.getenv("LPR_DET_MODEL", "models/plate_yolov5s.onnx")

# –õ–æ–≥–≥–µ—Ä—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
log_api = logger.bind(context="api")
log_mon = logger.bind(context="monitor")

# –§—É–Ω–∫—Ü–∏—è-—ç–Ω—Ç—Ä–∏–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def _monitor_entrypoint(cameras_yaml: str, camera_key: str, det_model: str):
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        from app.utils.logger import logger as _lg
        _log = _lg.bind(context="monitor")

        # –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        from app.monitoring.run_monitor import LPRPipeline, CameraConfig
        from app.monitoring.roi.masks import MaskStore
        from app.monitoring.config_runtime import RuntimeOptions
        from app.monitoring.config_resolver import resolve_rtsp

        with open(cameras_yaml, "r", encoding="utf-8") as f:
            cams = yaml.safe_load(f)

        cam_cfg = cams["cameras"][camera_key]
        rtsp_url = resolve_rtsp(cam_cfg["rtsp"])

        masks = MaskStore(cameras_yaml)
        rt = RuntimeOptions.from_env()

        cam = CameraConfig(
            name=camera_key,
            rtsp_url=rtsp_url,
            mask_name=camera_key,
            show_window=bool(cam_cfg.get("debug_window", False)),
        )

        _log.info(
            "–°—Ç–∞—Ä—Ç LPR-–ø–∞–π–ø–ª–∞–π–Ω–∞ | camera='{}' model='{}' yaml='{}'",
            camera_key,
            det_model,
            cameras_yaml,
        )

        pipe = LPRPipeline(cam=cam, masks=masks, rt=rt, detector_model=det_model)
        pipe.run_forever()

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º ‚Äî API –∂–∏–≤—ë—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        try:
            _log.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e)
        except Exception:
            print(f"[MONITOR] Fatal error: {e}", file=sys.stderr)


# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
async def configure_routers():
    log_api.info("–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã API...")

    auth_api = AuthAPI()
    security_api = SecurityAPI()
    profile_api = ProfileAPI()
    user_api = UserAPI()
    admin_api = AdminAPI()
    background_api = BackgroundAPI()
    sse_api = StreemAPI()

    log_api.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã...")
    await auth_api.initialize_routes()
    await security_api.initialize_routes()
    await profile_api.initialize_routes()
    await user_api.initialize_routes()
    await admin_api.initialize_routes()
    await background_api.initialize_routes()
    await sse_api.initialize_routes()

    log_api.info("–î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    app_account.include_router(auth_api.router)
    app_account.include_router(security_api.router)
    app_account.include_router(profile_api.router)
    app_account.include_router(user_api.router)
    app_account.include_router(admin_api.router)
    app_account.include_router(background_api.router)
    app_account.include_router(sse_api.router)

    app_monitoring.include_router(stream_video_router, tags=["Video stream"])

    app_bot.include_router(bot_router, tags=["Bot"])

    app.include_router(web_router, tags=["Web"])



# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@asynccontextmanager
async def lifespan(application: FastAPI) -> AsyncGenerator:
    monitor_proc: Process | None = None
    try:
        log_api.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è...")
        register_exception_handlers(application)

        log_api.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ API...")
        await configure_routers()

        log_api.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –≤ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        await UserDAO.check_roles_in_db()

        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
        if LPR_ENABLED:
            try:
                monitor_proc = Process(
                    target=_monitor_entrypoint,
                    args=(LPR_CAMERAS_YAML, LPR_CAMERA_KEY, LPR_DET_MODEL),
                    name="lpr-monitor",
                    daemon=True,
                )
                monitor_proc.start()
                log_mon.info(
                    "–ü—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω | pid={} camera_key='{}'",
                    monitor_proc.pid,
                    LPR_CAMERA_KEY,
                )
            except Exception as e:
                log_mon.exception("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e)
        else:
            log_mon.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á—ë–Ω (LPR_ENABLED=0)")

        log_api.info("–ó–∞–ø—É—Å–∫–∞–µ–º API...")
        yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ

    finally:
        log_api.info("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        if monitor_proc and monitor_proc.is_alive():
            log_mon.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞‚Ä¶")
            try:
                monitor_proc.terminate()
                monitor_proc.join(timeout=5)
                if monitor_proc.is_alive():
                    log_mon.warning("–ü—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è")
            except Exception as e:
                log_mon.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e)


app_account = FastAPI(
    lifespan=lifespan,
    title="üß© SVM-A Account API",
    root_path="/api/account",
)

app_monitoring = FastAPI(
    lifespan=lifespan,
    title="üß© SVM-A Monitoring API",
    root_path="/api/monitoring",
)

app_bot = FastAPI(
    lifespan=lifespan,
    title="üîê –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç SVM-A",
    root_path="/api/tg-bot",
)


app = FastAPI(
    lifespan=lifespan,
    title="SVM-A Web Application",
    root_path='/account',
    description=main_description,
    terms_of_service=terms_of_service,
    version=get_app_version(),
    contact=contact,
    openapi_url="/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc",
    license_info={"name": "Proprietary"},
    swagger_ui_parameters={"persistAuthorization": True, "faviconUrl": "app/docs/favicon/favicon-96x96.png"},
    swagger_ui_init_oauth={
        "clientId": "swagger-client",
        "appName": "Swagger SVM-A Account",
        "scopes": "USER DEVELOPER",
        "usePkceWithAuthorizationCodeGrant": True,
    }
)

# ====== –ó–∞—â–∏—Ç–∞ Swagger UI (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ, –∑–∞–∫–æ–º–º–µ–Ω—á–µ–Ω–æ) ======
# protected_swagger = ProtectedSwagger()
# @app.middleware("http")
# async def main_app_swagger_auth(request: Request, call_next):
#     return await protected_swagger.process_request(request, call_next)

# ====== –û—Å—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======
# app.add_middleware(FingerPrintMiddleware)       # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–æ–≤
app.add_middleware(LogRouteMiddleware)         # 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.add_middleware(DynamicCORSMiddleware)      # 3. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π CORS
# app.add_middleware(AutoRefreshMiddleware)     # 4. –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.


@app.get("/health", include_in_schema=False)
def health():
    return {"status": "ok"}

log_api.info("C–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")

for route, path in get_project_path_settings().static_mounts.items():
    app.mount(f"/{route}", StaticFiles(directory=path), name=route)

app.mount("/api/tg-bot", app_bot)

app.mount("/api/monitoring", app_monitoring)

app.mount("/api/account", app_account)


if __name__ == "__main__":
    try:
        uvicorn.run(
            "run:app",
            host="0.0.0.0",
            port=55666,
            reload=True,
            proxy_headers=True,
            factory=False,
        )
    except asyncio.CancelledError:
        print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CancelledError)")
        sys.exit(0)
    except KeyboardInterrupt:
        print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (CTRL+C)")
        sys.exit(0)
    except Exception as e:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —è—Å–Ω–æ, —á—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –∏–º–µ–Ω–Ω–æ —É API-—á–∞—Å—Ç–∏ (–ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API: {e}")
        sys.exit(1)
