import asyncio
import mimetypes
import os
from datetime import datetime
from io import BytesIO
from uuid import UUID

from fastapi import HTTPException
from fastapi.responses import StreamingResponse
from app.utils.logger import logger
from minio.error import S3Error
from PIL import Image, UnidentifiedImageError

from app.core.config import base_photo_path
from app.services.s3 import get_s3_client

s3client = get_s3_client()


async def validate_image_file(file_buffer: bytes, filename: str) -> bool:
    """
    üßê –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë).
    """
    size_mb = len(file_buffer) / (1024 * 1024)
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ {filename}, —Ä–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
    if size_mb > 10:
        logger.warning(f"–§–∞–π–ª {filename} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 10 –ú–ë")
        return False
    try:
        await asyncio.to_thread(lambda: Image.open(BytesIO(file_buffer)).verify())
        logger.info(f"–§–∞–π–ª {filename} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return True
    except UnidentifiedImageError:
        logger.warning(f"–§–∞–π–ª {filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return False


async def convert_to_webp(file_buffer: bytes, quality: int = 80) -> bytes:
    """
    üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç WebP —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º.
    """
    logger.info("–ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebP")
    try:

        def _convert():
            with Image.open(BytesIO(file_buffer)) as img:
                img = img.convert("RGB")
                output = BytesIO()
                img.save(output, format="WEBP", quality=quality)
                return output.getvalue()

        webp_bytes = await asyncio.to_thread(_convert)
        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä: {len(webp_bytes)/1024:.2f} KB")
        return webp_bytes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebP")


async def resize_and_crop(image: Image.Image, min_side=64) -> Image.Image:
    """
    ‚úÇÔ∏è –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ.
    """
    logger.info("–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    try:
        width, height = image.size
        scale = min_side / min(width, height)
        new_size = (int(width * scale), int(height * scale))
        resized_image = await asyncio.to_thread(
            lambda: image.resize(new_size, Image.Resampling.LANCZOS)
        )
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ: {new_size}")
        return resized_image
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


async def upload_and_prepare_images(
    photo_id: str, orig_file_buffer: bytes, date: datetime, object_type: str = 'avatar'
) -> tuple[str, str]:
    """
    üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
    - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞;
    - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é;
    - –∑–∞–≥—Ä—É–∑–∫–∞ –≤ S3 –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ.
    """
    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {photo_id}")
    try:
        orig_webp_bytes = await convert_to_webp(orig_file_buffer)
        with Image.open(BytesIO(orig_file_buffer)) as img:
            img = img.convert("RGB")
            preview_img = await resize_and_crop(img)
            output = BytesIO()
            await asyncio.to_thread(preview_img.save, output, "WEBP", quality=80)
            preview_webp_bytes = output.getvalue()
            logger.info("–ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")

        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ BytesIO, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ upload_photo_and_preview
        orig_stream = BytesIO(orig_webp_bytes)
        preview_stream = BytesIO(preview_webp_bytes)

        if s3client.use_s3:
            return await upload_photo_and_preview(
                photo_id, orig_stream, preview_stream, date, object_type
            )
        else:
            return await local_upload_photo_and_preview(
                photo_id, orig_stream, preview_stream, date, object_type
            )

    except HTTPException as e:
        logger.error(f"HTTPException: {e.detail}")
        raise e
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        raise HTTPException(
            status_code=500, detail="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –∑–∞–≥—Ä—É–∑–∫–µ"
        )


async def upload_photo_and_preview(
    photo_id: str, orig_stream: BytesIO, preview_stream: BytesIO, date: datetime, object_type: str
) -> tuple[str, str]:
    """
    ‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–≤—å—é –≤ S3-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    """
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ S3")
    date_str = date.strftime("%Y-%m-%d")
    orig_key = f"{object_type}/{date_str}/{photo_id}/orig.webp"
    preview_key = f"{object_type}/{date_str}/{photo_id}/preview.webp"

    try:
        orig_stream.seek(0)
        await asyncio.to_thread(
            s3client.client.put_object,
            s3client.bucket_name,
            orig_key,
            orig_stream,
            orig_stream.getbuffer().nbytes,
            "image/webp",
        )
        logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {orig_key} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3")
    except S3Error as e:
        logger.error(f"S3Error –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {orig_key}: {e}")
        raise HTTPException(status_code=500, detail=f"S3 –æ—à–∏–±–∫–∞: {e.code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {orig_key}: {e}")
        raise HTTPException(
            status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ S3"
        )

    try:
        orig_stream.seek(0)
        await asyncio.to_thread(
            s3client.client.put_object,
            s3client.bucket_name,
            preview_key,
            preview_stream,
            preview_stream.getbuffer().nbytes,
            "image/webp",
        )
        logger.info(f"–ü—Ä–µ–≤—å—é {preview_key} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3")
    except S3Error as e:
        logger.error(f"S3Error –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é {preview_key}: {e}")
        raise HTTPException(status_code=500, detail=f"S3 –æ—à–∏–±–∫–∞: {e.code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é {preview_key}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é –≤ S3")

    return orig_key, preview_key


async def local_upload_photo_and_preview(
    photo_id: str, orig_stream: BytesIO, preview_stream: BytesIO, date: datetime, object_type: str
) -> tuple[str, str]:
    """
    üíæ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –ø—Ä–µ–≤—å—é –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.
    """
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ")
    date_str = date.strftime("%Y-%m-%d")
    orig_key = f"{object_type}/{date_str}/{photo_id}/orig.webp"
    preview_key = f"{object_type}/{date_str}/{photo_id}/preview.webp"
    orig_path = base_photo_path() / orig_key
    preview_path = base_photo_path() / preview_key

    try:
        os.makedirs(os.path.dirname(orig_path), exist_ok=True)
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {os.path.dirname(orig_path)}")
    except OSError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")

    try:
        orig_stream.seek(0)
        with open(orig_path, "wb") as f:
            f.write(orig_stream.read())
        logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {orig_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞.")

    try:
        with open(preview_path, "wb") as f:
            f.write(preview_stream.read())
        logger.info(f"–ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {preview_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—å—é: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—å—é.")

    return orig_key, preview_key


async def delete_photo_file(link: str):
    """
    üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (S3 –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ).
    """
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {link}")
    try:

        if s3client.use_s3:
            await asyncio.to_thread(
                s3client.client.remove_object, s3client.bucket_name, link
            )
            logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ S3")
            return True
        else:
            path = os.path.join(base_photo_path(), link)
            if os.path.exists(path):
                os.remove(path)
                logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
                return True
            else:
                logger.warning("–§–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")


async def get_photo_file(
    object_type: str, date: str, identifier: int, filename: str
) -> StreamingResponse:
    """
    üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –æ—Ç–¥–∞—á–∞ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ StreamingResponse.
    """

    key = f"{object_type}/{date}/{identifier}/{filename}"
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {key}")
    try:
        if s3client.use_s3:
            response = await asyncio.to_thread(
                s3client.client.get_object, s3client.bucket_name, key
            )
            media_type, _ = mimetypes.guess_type(filename)
            return StreamingResponse(
                response.stream(32 * 1024),
                media_type=media_type or "application/octet-stream",
            )
        else:
            path = os.path.join(base_photo_path(), key)
            if not os.path.exists(path):
                raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
            return StreamingResponse(
                open(path, "rb"),
                media_type=mimetypes.guess_type(filename)[0]
                or "application/octet-stream",
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
