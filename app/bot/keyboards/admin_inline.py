from __future__ import annotations

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData


class AdminCallback(CallbackData, prefix="adm"):
    section: str                 # "menu" | "stats" | ...
    action: str | None = None    # "open" | "pick_file" | "period" | "files_page" | "back"
    period: str | None = None    # "today" | "7d" | "30d"
    file: str | None = None      # md5(file_name) hex
    page: int | None = None      # pagination for files
    ban_id: str | None = None    # UUID —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)



def admin_main_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(
        text="üì• –û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º",
        callback_data=AdminCallback(section="stats", action="open").pack(),
    )
    kb.button(text="üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π",
              callback_data=AdminCallback(section="ban", action="open").pack())
    kb.adjust(1)
    # kb.button(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=AdminCallback(section="users", action="open").pack())
    return kb.as_markup()

######## –ë–∞–Ω –ª–∏—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

def ban_root_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–∞–Ω",
              callback_data=AdminCallback(section="ban", action="add").pack())
    kb.button(text="üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∞",
              callback_data=AdminCallback(section="ban", action="list", page=1).pack())
    kb.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–Ω–∞",
              callback_data=AdminCallback(section="ban", action="del_list", page=1).pack())
    kb.button(text="üè† –í –º–µ–Ω—é",
              callback_data=AdminCallback(section="menu", action="open").pack())
    kb.adjust(1)
    return kb.as_markup()

def build_ban_list(items: list[tuple[str, str]], page: int, has_prev: bool, has_next: bool, mode: str) -> InlineKeyboardMarkup:
    """
    items: [(ban_id, label)]
    mode: "view" | "delete"
    """
    kb = InlineKeyboardBuilder()
    for _id, label in items:
        if mode == "view":
            # –ø—Ä–æ—Å—Ç–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä ‚Äî –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
            kb.button(text=f"‚Ä¢ {label}", callback_data=AdminCallback(section="ban", action="noop").pack())
        else:
            kb.button(text=f"üóëÔ∏è {label}",
                      callback_data=AdminCallback(section="ban", action="del_pick", ban_id=_id, page=page).pack())

    nav_row: list[InlineKeyboardButton] = []
    if has_prev:
        nav_row.append(InlineKeyboardButton(
            text="¬´ –ù–∞–∑–∞–¥",
            callback_data=AdminCallback(section="ban", action=("del_list" if mode == "delete" else "list"), page=page-1).pack()
        ))
    if has_next:
        nav_row.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ¬ª",
            callback_data=AdminCallback(section="ban", action=("del_list" if mode == "delete" else "list"), page=page+1).pack()
        ))
    if nav_row:
        kb.row(*nav_row)

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdminCallback(section="ban", action="open").pack())
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data=AdminCallback(section="menu", action="open").pack())
    kb.adjust(1)
    return kb.as_markup()

def confirm_delete_menu(ban_id: str, page: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=AdminCallback(section="ban", action="del_confirm", ban_id=ban_id, page=page).pack())
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=AdminCallback(section="ban", action="del_list", page=page).pack())
    kb.adjust(2)
    return kb.as_markup()



######## –ü–æ–¥–∞—Ä–∫–∏

def stats_period_menu(selected: str, file_token: str) -> InlineKeyboardMarkup:
    # three period buttons + back to files + back to root
    def _mark(lbl: str, val: str) -> str:
        return f"‚Ä¢ {lbl}" if val == selected else lbl

    kb = InlineKeyboardBuilder()
    kb.button(text=_mark("–°–µ–≥–æ–¥–Ω—è", "today"),
              callback_data=AdminCallback(section="stats", action="period", period="today", file=file_token).pack())
    kb.button(text=_mark("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "7d"),
              callback_data=AdminCallback(section="stats", action="period", period="7d", file=file_token).pack())
    kb.button(text=_mark("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "30d"),
              callback_data=AdminCallback(section="stats", action="period", period="30d", file=file_token).pack())
    kb.button(text="‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª",
              callback_data=AdminCallback(section="stats", action="back", file=file_token).pack())
    kb.button(text="üè† –í –º–µ–Ω—é",
              callback_data=AdminCallback(section="menu", action="open").pack())
    kb.adjust(1)
    return kb.as_markup()


def build_files_menu(items: list[tuple[str, str]], page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    """
    items: list of (file_token_md5, display_text)
    """
    kb = InlineKeyboardBuilder()
    for token, label in items:
        kb.button(
            text=label,
            callback_data=AdminCallback(section="stats", action="pick_file", file=token).pack(),
        )

    nav_row: list[InlineKeyboardButton] = []
    if has_prev:
        nav_row.append(
            InlineKeyboardButton(
                text="¬´ –ù–∞–∑–∞–¥",
                callback_data=AdminCallback(section="stats", action="files_page", page=page - 1).pack(),
            )
        )
    if has_next:
        nav_row.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ¬ª",
                callback_data=AdminCallback(section="stats", action="files_page", page=page + 1).pack(),
            )
        )
    if nav_row:
        kb.row(*nav_row)

    kb.button(text="üè† –í –º–µ–Ω—é",
              callback_data=AdminCallback(section="menu", action="open").pack())
    kb.adjust(1)
    return kb.as_markup()