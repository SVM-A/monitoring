# app/bot/handlers/user_chats.py

from datetime import datetime, timezone, timedelta

from aiogram.exceptions import TelegramForbiddenError, TelegramAPIError, TelegramRetryAfter, TelegramBadRequest, TelegramNotFound
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.enums import ChatAction
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from app.core.config import public_channel_chat_id, get_projects_path, elya_chat_id, get_admin_ids
from app.db.models.service_notifier import TelegramUser, TGKeys, TelegramChat, ReceivedGift
from app.db.schemas.service_notifier import ChatCreate
from app.db.sessions import async_connect_db
from app.utils.logger import logger
from bot.decorators import bot_error_handler
from bot.keyboards.inline import main_menu_keyboard, go_to_public_channel

GIFT_FILE = FSInputFile(get_projects_path().GIFT_FILE_PATH)

@bot_error_handler
@async_connect_db(commit=True)
async def process_get_gift(message: Message | CallbackQuery, db: AsyncSession):
    if isinstance(message, CallbackQuery):
        user_id = message.from_user.id
        bot = message.bot
        send = message.message.answer
        await message.answer()
    else:
        user_id = message.from_user.id
        bot = message.bot
        send = message.answer

    try:
        chat_member = await bot.get_chat_member(chat_id=public_channel_chat_id(), user_id=user_id)
    except TelegramAPIError:
        await send("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    del_msg = None
    status = chat_member.status
    if status in ("member", "administrator", "creator"):
        try:
            tg_id = (await db.execute(select(TelegramUser.id).where(TelegramUser.telegram_id == message.from_user.id))).scalar_one_or_none()
            if tg_id:
                rec_gift = ReceivedGift(tg_user_id=tg_id, file_name=str(get_projects_path().GIFT_FILE_PATH).split("/")[-1])
                db.add(rec_gift)
                await db.flush()
            del_msg = await bot.send_message(chat_id=user_id, text='–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫–Ω–¥–æ—á–∫—É.')
            await bot.send_chat_action(chat_id=user_id, action=ChatAction.UPLOAD_DOCUMENT)
            await bot.send_document(
                chat_id=user_id,
                document=GIFT_FILE,
                caption="üéÅ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É!"
            )
        except TelegramForbiddenError:
            await send("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: @beaheaBot")
        except TelegramRetryAfter as e:
            await send("–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.")
        except TelegramBadRequest as e:
            await send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –°–æ–æ–±—â–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        finally:
            if del_msg:
                await bot.delete_message(chat_id=user_id, message_id=del_msg.message_id)
    else:
        await send(
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!",
            reply_markup=go_to_public_channel
        )

@bot_error_handler
@async_connect_db(commit=True)
async def process_start_private_chat(message: Message | CallbackQuery, db: AsyncSession):
    if isinstance(message, CallbackQuery):
        from_user = message.from_user
        send = message.message.answer
        await message.answer()
    else:
        from_user = message.from_user
        send = message.answer

    logger.info('1. –†–∞–±–æ—Ç–∞–µ–º –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

    stmt = select(TelegramUser).where(TelegramUser.telegram_id == from_user.id)
    user = (await db.execute(stmt)).scalar_one_or_none()

    if user:
        logger.info('   –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        user.first_name = from_user.first_name
        user.last_name = from_user.last_name
        user.username = from_user.username
        user.language_code = from_user.language_code
        logger.info(f"  –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
    else:
        logger.info('   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        user = TelegramUser(
            telegram_id=from_user.id,
            is_bot=from_user.is_bot,
            first_name=from_user.first_name,
            last_name=from_user.last_name,
            username=from_user.username,
            language_code=from_user.language_code
        )
        db.add(user)
        logger.info(f"   –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")

    logger.info("2. –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await db.flush()

    logger.info("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞")
    token_stmt = select(TGKeys).where(TGKeys.tg_user_id == user.id)
    existing_token = (await db.execute(token_stmt)).scalar_one_or_none()

    if not existing_token:
        logger.info("   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
        verification_key = TGKeys(tg_user_id=user.id, tg_chat_id=None)
        db.add(verification_key)
        await db.flush()
        logger.info(f"   –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    else:
        logger.info("   –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞")
        existing_token.expires_at = datetime.now(timezone.utc) + timedelta(days=3)
        logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")

    logger.info("4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç–æ–∫–µ–Ω–æ–º")
    full_stmt = (
        select(TelegramUser)
        .options(selectinload(TelegramUser.verification_key))
        .where(TelegramUser.telegram_id == from_user.id)
    )
    user_with_token = (await db.execute(full_stmt)).scalar_one()

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if not user_with_token.verification_key:
        logger.error("   –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
        await send("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø. –ú—ã —É–∂–µ —Ä–µ—à–∞–µ–º –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç!")
        return  # –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

    logger.info("5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")

    welcome_msg = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –≠–ª–∏.\n"
        "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è ‚ú®\n\n"
        "üì£ <b>–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª ¬´–≠–ª—è, –ï–¥–∞ –∏ –ì–∞–Ω—Ç–µ–ª—è¬ª:</b>\n"
        "<a href=\"https://t.me/beahea_public\">https://t.me/beahea_public</a>\n"
        "–ü–∏—à—É –æ –ó–û–ñ –±–µ–∑ –ø–µ—Ä–µ–≥–∏–±–æ–≤: –ø–∏—Ç–∞–Ω–∏–µ, —Å–ø–æ—Ä—Ç –∏ –∂–∏–∑–Ω—å –≤ –±–∞–ª–∞–Ω—Å–µ.\n"
        "–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∏ –Ω–µ —É–≥—Ä–æ–±–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ ‚Äì –≤—Å—ë –∑–¥–µ—Å—å.\n\n"
        "‚öôÔ∏è –ë–æ—Ç –ø–æ–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ–∏—à–µ–∫, —Ç–∞–∫ —á—Ç–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ —Å–≤—è–∑–∏!\n\n"
    )
    await send(welcome_msg, parse_mode="HTML", reply_markup=main_menu_keyboard)

@bot_error_handler
@async_connect_db(commit=True)
async def process_start_public_chat(message: Message | CallbackQuery, db: AsyncSession):
    if isinstance(message, CallbackQuery):
        chat = message.message.chat
        send = message.message.answer
        await message.answer()
    else:
        chat = message.chat
        send = message.answer
    logger.info("1. –†–∞–±–æ—Ç–∞–µ–º –≤ –≥—Ä—É–ø–ø–µ. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

    stmt = select(TelegramChat).where(TelegramChat.telegram_id == chat.id)
    chat_db = (await db.execute(stmt)).scalar_one_or_none()

    if chat_db:
        logger.info(f'   –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ {chat_db.type}')
        chat_db.type = chat_db.type
        chat_db.title = chat_db.title
        chat_db.username = chat_db.username
        chat_db.first_name = chat_db.first_name
        chat_db.last_name = chat_db.last_name
        chat_db.is_forum = chat_db.is_forum
        chat_db.invite_link = chat_db.invite_link
        chat_db.photo_id = chat_db.photo_id
        chat_db.is_active = True
        logger.info(f"  –û–±–Ω–æ–≤–ª–µ–Ω {chat_db.type}: {chat_db.telegram_id}")

    else:
        chat_data = ChatCreate.from_telegram(chat)
        logger.info(f'   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π {chat_data.type}')
        chat_db = TelegramChat(
            telegram_id=chat_data.telegram_id,
            type=chat_data.type,
            title=chat_data.title,
            username=chat_data.username,
            first_name=chat_data.first_name,
            last_name=chat_data.last_name,
            is_forum=chat_data.is_forum,
            invite_link=chat_data.invite_link,
            photo_id=chat_data.photo_id,
        )
        db.add(chat_db)
        logger.info(f"   –°–æ–∑–¥–∞–Ω {chat_db.type}: {chat_db.telegram_id}")

    logger.info(f"2. –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è {chat_db.type}")
    await db.flush()

    logger.info("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞")
    token_stmt = select(TGKeys).where(TGKeys.tg_chat_id == chat_db.id)
    existing_token = (await db.execute(token_stmt)).scalar_one_or_none()

    if not existing_token:
        logger.info("   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
        verification_key = TGKeys(tg_chat_id=chat_db.id)
        db.add(verification_key)
        await db.flush()
        logger.info(f"   –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è {chat_db.type}: {chat_db.telegram_id}")
    else:
        logger.info("   –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞")
        existing_token.expires_at = datetime.now(timezone.utc) + timedelta(days=36000)
        logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_db.telegram_id}")

    logger.info("4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç–æ–∫–µ–Ω–æ–º")
    full_stmt = (
        select(TelegramChat)
        .options(selectinload(TelegramChat.verification_key))
        .where(TelegramChat.telegram_id == chat.id)
    )
    chat_with_token = (await db.execute(full_stmt)).scalar_one()

    if not chat_with_token.verification_key:
        logger.error("   –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
        await send(
            "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –¥–ª—è –≥—Ä—É–ø–ø—ã. –ú—ã —É–∂–µ —Ä–µ—à–∞–µ–º –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç!")
        return

    logger.info("5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")

    welcome_msg = (
        "üëã <b>–ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –≠–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!</b>\n\n"
        "üì£ <b>–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª ¬´–≠–ª—è, –ï–¥–∞ –∏ –ì–∞–Ω—Ç–µ–ª—è¬ª:</b>\n"
        "<a href=\"https://t.me/beahea_public\">https://t.me/beahea_public</a>\n"
        "–ó–û–ñ –±–µ–∑ –ø–µ—Ä–µ–≥–∏–±–æ–≤: –ø–∏—Ç–∞–Ω–∏–µ, —Å–ø–æ—Ä—Ç –∏ –∂–∏–∑–Ω—å –≤ –±–∞–ª–∞–Ω—Å–µ.\n\n"
        "‚öôÔ∏è –ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
    )

    await send(welcome_msg, parse_mode="HTML", reply_markup=main_menu_keyboard)



