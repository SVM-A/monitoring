# app/bot/handlers/user_chats.py

import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from app.core.config import elya_chat_id
from app.utils.logger import logger
from bot.states.send_message import SendMessageStates
from bot.decorators import bot_error_handler
from bot.handlers.massages import process_get_gift, process_start_private_chat, process_start_public_chat
from bot.keyboards.inline import go_to_public_channel, go_to_beahea_bot_for_gift

chat_router = Router()


@chat_router.message(CommandStart())
@bot_error_handler
async def handle_start(message: Message):
    from_user = message.from_user
    chat = message.chat
    logger.info(f"/start –æ—Ç {from_user.id} –≤ —á–∞—Ç–µ {chat.id} ({chat.type})")
    if chat.type == "private":
        await process_start_private_chat(message)
    elif chat.type in ["group", "supergroup"]:
        await process_start_public_chat(message)
    else:
        await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö.")



@chat_router.message(Command("message_gift"))
@bot_error_handler
async def get_gift_cmd(message: Message):
    welcome_msg = (
        "üéÅ <b>–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫</b> —É –Ω–∞—à–µ–≥–æ <a href=\"https://t.me/beaheaBot\"><b>–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞</b></a>"
    )
    await message.answer(welcome_msg, parse_mode="HTML", reply_markup=go_to_beahea_bot_for_gift)


@chat_router.message(Command("gift"))
async def get_gift_cmd(message: Message):
    await process_get_gift(message=message)




@chat_router.message(Command("public_channel"))
async def public_channel_cmd(message: Message):
    await message.answer(
        "–ö–∞–Ω–∞–ª ¬´–≠–ª—è, –ï–¥–∞ –∏ –ì–∞–Ω—Ç–µ–ª—è¬ª ‚Äî –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è!",
        reply_markup=go_to_public_channel
    )

@chat_router.message(Command("chat_id"))
@bot_error_handler
async def get_gift_cmd(message: Message):
    chat = message.chat
    await message.answer(text=f"Chat_id {chat.id}", parse_mode="HTML")



@chat_router.message(Command("send"))
async def get_gift_cmd(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≠–ª–∏. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å /cancel.")
    await state.set_state(SendMessageStates.waiting_for_text)



@chat_router.message(F.reply_to_message, F.chat.id == elya_chat_id())
@bot_error_handler
async def handle_elya_reply(message: Message):
    logger.debug("handle_elya_reply –≤—ã–∑–≤–∞–Ω")
    logger.debug(f"from_user.id: {message.from_user.id}")
    logger.debug(f"from_user.first_name: {message.from_user.first_name}")
    logger.debug(f"from_user.last_name: {getattr(message.from_user, 'last_name', None)}")
    logger.debug(f"message.text: {message.text}")
    logger.debug(f"reply_to_message: {message.reply_to_message}")
    logger.debug(f"elya_chat_id(): {elya_chat_id()}")
    logger.debug(f"type(message.from_user.id): {type(message.from_user.id)}")
    logger.debug(f"type(elya_chat_id()): {type(elya_chat_id())}")
    if not message.reply_to_message:
        logger.debug("–ù–µ—Ç reply_to_message, –≤—ã—Ö–æ–¥.")
        await message.answer("–¢—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∞ –Ω–æ–≤–æ–µ.")
        return

    original = message.reply_to_message.text or ""
    logger.debug(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç reply_to_message: {original}")

    match = re.search(r"\((\d+)\):", original)
    if not match:
        logger.debug("–ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ reply_to_message.")
        await message.answer("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –í–æ—Ç —á—Ç–æ –±—ã–ª–æ –≤ reply:\n" + original)
        return

    user_id = int(match.group(1))
    logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π user_id: {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if not message.text:
        logger.debug("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ç–≤–µ—Ç.")
        await message.answer("–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return

    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await message.bot.send_message(
            user_id,
            f"–û—Ç–≤–µ—Ç –æ—Ç –≠–ª–∏:\n{message.text}"
        )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")